apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: git-clone
  namespace: pipelines-as-code
spec:
  description: |
    Clones a git repository.
  params:
    - name: url
      description: Repository URL to clone from.
      type: string
    - name: revision
      description: Revision to checkout.
      type: string
      default: "main"
  workspaces:
    - name: output
      description: The git repo will be cloned onto the volume backing this Workspace.
  results:
    - name: commit
      description: The precise commit SHA that was fetched by this Task.
    - name: url
      description: The precise URL that was fetched by this Task.
  steps:
    - name: cleanup
      image: uhub.service.ucloud.cn/base-images/alpine:3.18
      workingDir: $(workspaces.output.path)
      timeout: "2m"
      resources:
        requests:
          memory: 64Mi
          cpu: 100m
        limits:
          memory: 128Mi
          cpu: 200m
      script: |
        #!/bin/sh
        set -e
        echo "Cleaning up workspace directory..."
        rm -rf ./* ./.* 2>/dev/null || true
        echo "Cleanup completed"

    - name: clone
      image: uhub.service.ucloud.cn/base-images/git-init:v0.40.2
      workingDir: $(workspaces.output.path)
      timeout: "10m"
      resources:
        requests:
          memory: 128Mi
          cpu: 200m
        limits:
          memory: 256Mi
          cpu: 500m
      script: |
        #!/bin/sh
        set -ex
        echo "Starting git clone..."
        git config --global http.version HTTP/1.1
        git config --global http.postBuffer 524288000
        git config --global http.lowSpeedLimit 1000
        git config --global http.lowSpeedTime 300
        git clone --depth 1 "$(params.url)" .
        git checkout "$(params.revision)"
        COMMIT_SHA=$(git rev-parse HEAD)
        echo -n "$COMMIT_SHA" > "$(results.commit.path)"
        echo -n "$(params.url)" > "$(results.url.path)"
        echo "Git clone completed successfully"
